import { AsyncThunk } from '@reduxjs/toolkit';
import { CombinedState, QuerySubstateIdentifier, MutationSubstateIdentifier, Subscribers, ConfigState } from './apiState';
import { MutationThunkArg, QueryThunkArg, ThunkResult } from './buildThunks';
import { AssertTagTypes, EndpointDefinitions } from '../endpointDefinitions';
import { Patch } from 'immer';
import { ApiContext } from '../apiTypes';
export declare function buildSlice({ reducerPath, queryThunk, mutationThunk, context: { endpointDefinitions: definitions }, assertTagType, config, }: {
    reducerPath: string;
    queryThunk: AsyncThunk<ThunkResult, QueryThunkArg<any>, {}>;
    mutationThunk: AsyncThunk<ThunkResult, MutationThunkArg<any>, {}>;
    context: ApiContext<EndpointDefinitions>;
    assertTagType: AssertTagTypes;
    config: Omit<ConfigState<string>, 'online' | 'focused'>;
}): {
    reducer: import("redux").Reducer<import("redux").CombinedState<CombinedState<any, string, string>>, import("redux").AnyAction>;
    actions: {
        updateSubscriptionOptions: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
            endpointName: string;
            requestId: string;
            options: Subscribers[number];
        } & QuerySubstateIdentifier, string>;
        queryResultPatched: import("@reduxjs/toolkit").ActionCreatorWithPayload<QuerySubstateIdentifier & {
            patches: Patch[];
        }, string>;
        removeQueryResult: import("@reduxjs/toolkit").ActionCreatorWithPayload<QuerySubstateIdentifier, string>;
        unsubscribeQueryResult: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
            requestId: string;
        } & QuerySubstateIdentifier, string>;
        unsubscribeMutationResult: import("@reduxjs/toolkit").ActionCreatorWithPayload<MutationSubstateIdentifier, string>;
        resetApiState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    };
};
export declare type SliceActions = ReturnType<typeof buildSlice>['actions'];
//# sourceMappingURL=buildSlice.d.ts.map