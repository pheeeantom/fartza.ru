import { createNextState, createSelector } from '@reduxjs/toolkit';
import { QueryStatus, getRequestStatusFlags } from './apiState.js';

const skipSelector = Symbol('skip selector');
const initialSubState = {
  status: QueryStatus.uninitialized
}; // abuse immer to freeze default states

const defaultQuerySubState = createNextState({}, () => initialSubState);
const defaultMutationSubState = createNextState({}, () => initialSubState);
function buildSelectors({
  serializeQueryArgs,
  reducerPath
}) {
  return {
    buildQuerySelector,
    buildMutationSelector
  };

  function withRequestFlags(substate) {
    return { ...substate,
      ...getRequestStatusFlags(substate.status)
    };
  }

  function selectInternalState(rootState) {
    return rootState[reducerPath];
  }

  function buildQuerySelector(endpointName, endpointDefinition) {
    return queryArgs => {
      const selectQuerySubState = createSelector(selectInternalState, internalState => {
        var _ref;

        return (_ref = queryArgs === skipSelector ? undefined : internalState.queries[serializeQueryArgs({
          queryArgs,
          endpointDefinition,
          endpointName
        })]) != null ? _ref : defaultQuerySubState;
      });
      return createSelector(selectQuerySubState, withRequestFlags);
    };
  }

  function buildMutationSelector() {
    return mutationId => {
      const selectMutationSubstate = createSelector(selectInternalState, internalState => {
        var _ref2;

        return (_ref2 = mutationId === skipSelector ? undefined : internalState.mutations[mutationId]) != null ? _ref2 : defaultMutationSubState;
      });
      return createSelector(selectMutationSubstate, withRequestFlags);
    };
  }
}

export { buildSelectors, skipSelector };
//# sourceMappingURL=buildSelectors.js.map
