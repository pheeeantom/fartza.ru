import { buildThunks } from './buildThunks.js';
import { isQueryDefinition, isMutationDefinition } from '../endpointDefinitions.js';
import { buildSelectors } from './buildSelectors.js';
import { onOnline, onOffline, onFocus, onFocusLost } from './setupListeners.js';
import { buildSlice } from './buildSlice.js';
import { buildMiddleware } from './buildMiddleware.js';
import { buildInitiate } from './buildInitiate.js';
import { safeAssign } from '../tsHelpers.js';

/**
 * Note: this file should import all other files for type discovery and declaration merging
 */
const coreModuleName = Symbol();
/**
 * Creates a module containing the basic redux logic for use with `buildCreateApi`.
 *
 * @example
 * ```ts
 * const createBaseApi = buildCreateApi(coreModule());
 * ```
 */

const coreModule = () => ({
  name: coreModuleName,

  init(api, {
    baseQuery,
    tagTypes,
    reducerPath,
    serializeQueryArgs,
    keepUnusedDataFor,
    refetchOnMountOrArgChange,
    refetchOnFocus,
    refetchOnReconnect
  }, context) {

    const assertTagType = tag => {
      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {
        if (!tagTypes.includes(tag.type)) {
          console.error(`Tag type '${tag.type}' was used, but not specified in \`tagTypes\`!`);
        }
      }

      return tag;
    };

    Object.assign(api, {
      reducerPath,
      endpoints: {},
      internalActions: {
        onOnline,
        onOffline,
        onFocus,
        onFocusLost
      },
      util: {}
    });
    const {
      queryThunk,
      mutationThunk,
      patchQueryResult,
      updateQueryResult,
      prefetch,
      buildMatchThunkActions
    } = buildThunks({
      baseQuery,
      reducerPath,
      context,
      api,
      serializeQueryArgs
    });
    const {
      reducer,
      actions: sliceActions
    } = buildSlice({
      context,
      queryThunk,
      mutationThunk,
      reducerPath,
      assertTagType,
      config: {
        refetchOnFocus,
        refetchOnReconnect,
        refetchOnMountOrArgChange,
        keepUnusedDataFor,
        reducerPath
      }
    });
    safeAssign(api.util, {
      patchQueryResult,
      updateQueryResult,
      prefetch,
      resetApiState: sliceActions.resetApiState
    });
    safeAssign(api.internalActions, sliceActions);
    const {
      middleware,
      actions: middlewareActions
    } = buildMiddleware({
      reducerPath,
      context,
      queryThunk,
      mutationThunk,
      api,
      assertTagType
    });
    safeAssign(api.util, middlewareActions);
    safeAssign(api, {
      reducer: reducer,
      middleware
    });
    const {
      buildQuerySelector,
      buildMutationSelector
    } = buildSelectors({
      serializeQueryArgs: serializeQueryArgs,
      reducerPath
    });
    const {
      buildInitiateQuery,
      buildInitiateMutation
    } = buildInitiate({
      queryThunk,
      mutationThunk,
      api,
      serializeQueryArgs: serializeQueryArgs
    }); // remove in final release

    Object.defineProperty(api.util, 'invalidateEntities', {
      get() {
        if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {
          console.warn('`api.util.invalidateEntities` has been renamed to `api.util.invalidateTags`, please change your code accordingly');
        }

        return api.util.invalidateTags;
      }

    });
    Object.defineProperty(api.util, 'prefetchThunk', {
      get() {
        if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {
          console.warn('`api.util.prefetchThunk` has been renamed to `api.util.prefetch`, please change your code accordingly');
        }

        return api.util.prefetch;
      }

    });
    return {
      name: coreModuleName,

      injectEndpoint(endpointName, definition) {
        var _anyApi$endpoints, _anyApi$endpoints$end;

        const anyApi = api;
        (_anyApi$endpoints$end = (_anyApi$endpoints = anyApi.endpoints)[endpointName]) != null ? _anyApi$endpoints$end : _anyApi$endpoints[endpointName] = {};

        if (isQueryDefinition(definition)) {
          safeAssign(anyApi.endpoints[endpointName], {
            select: buildQuerySelector(endpointName, definition),
            initiate: buildInitiateQuery(endpointName, definition)
          }, buildMatchThunkActions(queryThunk, endpointName));
        } else if (isMutationDefinition(definition)) {
          safeAssign(anyApi.endpoints[endpointName], {
            select: buildMutationSelector(),
            initiate: buildInitiateMutation(endpointName, definition)
          }, buildMatchThunkActions(mutationThunk, endpointName));
        }
      }

    };
  }

});

export { coreModule, coreModuleName };
//# sourceMappingURL=module.js.map
