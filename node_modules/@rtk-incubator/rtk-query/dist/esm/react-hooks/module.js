import { buildHooks } from './buildHooks.js';
import { isQueryDefinition, isMutationDefinition } from '../endpointDefinitions.js';
import { safeAssign } from '../tsHelpers.js';
import { batch, useDispatch, useSelector, useStore } from 'react-redux';
import { capitalize } from '../utils/capitalize.js';

const reactHooksModuleName = Symbol();
/**
 * Creates a module that generates react hooks from endpoints, for use with `buildCreateApi`.
 *
 *  @example
 * ```ts
 * const MyContext = React.createContext<ReactReduxContextValue>(null as any);
 * const customCreateApi = buildCreateApi(
 *   coreModule(),
 *   reactHooksModule({ useDispatch: createDispatchHook(MyContext) })
 * );
 * ```
 *
 * @returns A module for use with `buildCreateApi`
 */

const reactHooksModule = ({
  batch: batch$1 = batch,
  useDispatch: useDispatch$1 = useDispatch,
  useSelector: useSelector$1 = useSelector,
  useStore: useStore$1 = useStore
} = {}) => ({
  name: reactHooksModuleName,

  init(api, options, context) {
    const anyApi = api;
    const {
      buildQueryHooks,
      buildMutationHook,
      usePrefetch
    } = buildHooks({
      api,
      moduleOptions: {
        batch: batch$1,
        useDispatch: useDispatch$1,
        useSelector: useSelector$1,
        useStore: useStore$1
      }
    });
    safeAssign(anyApi, {
      usePrefetch
    });
    safeAssign(context, {
      batch: batch$1
    });
    return {
      injectEndpoint(endpointName, definition) {
        if (isQueryDefinition(definition)) {
          const {
            useQuery,
            useLazyQuery,
            useQueryState,
            useQuerySubscription
          } = buildQueryHooks(endpointName);
          safeAssign(anyApi.endpoints[endpointName], {
            useQuery,
            useLazyQuery,
            useQueryState,
            useQuerySubscription
          });
          api[`use${capitalize(endpointName)}Query`] = useQuery;
          api[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;
        } else if (isMutationDefinition(definition)) {
          const useMutation = buildMutationHook(endpointName);
          safeAssign(anyApi.endpoints[endpointName], {
            useMutation
          });
          api[`use${capitalize(endpointName)}Mutation`] = useMutation;
        }
      }

    };
  }

});

export { reactHooksModule, reactHooksModuleName };
//# sourceMappingURL=module.js.map
