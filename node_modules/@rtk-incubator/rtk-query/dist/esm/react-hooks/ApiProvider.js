import { configureStore } from '@reduxjs/toolkit';
import React from 'react';
import { Provider } from 'react-redux';
import { setupListeners } from '../core/setupListeners.js';

/**
 * Can be used as a `Provider` if you **do not already have a Redux store**.
 *
 * @example
 * ```ts
 * // codeblock-meta title="Basic usage - wrap your App with ApiProvider"
 * import * as React from 'react';
 * import { ApiProvider } from '@rtk-incubator/rtk-query';
 *
 * function App() {
 *   return (
 *     <ApiProvider api={api}>
 *       <Pokemon />
 *     </ApiProvider>
 *   );
 * }
 * ```
 *
 * @remarks
 * Using this together with an existing redux store, both will
 * conflict with each other - please use the traditional redux setup
 * in that case.
 */
function ApiProvider(props) {
    const [store] = React.useState(() => configureStore({
        reducer: {
            [props.api.reducerPath]: props.api.reducer,
        },
        middleware: (gDM) => gDM().concat(props.api.middleware),
    }));
    // Adds the event listeners for online/offline/focus/etc
    setupListeners(store.dispatch, props.setupListeners);
    return (React.createElement(Provider, { store: store, context: props.context }, props.children));
}

export { ApiProvider };
//# sourceMappingURL=ApiProvider.js.map
