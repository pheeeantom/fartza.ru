import { AnyAction, AsyncThunk, Middleware, ThunkDispatch } from '@reduxjs/toolkit';
import { RootState } from './apiState';
import { Api, ApiContext } from '../apiTypes';
import { MutationThunkArg, QueryThunkArg, ThunkResult } from './buildThunks';
import { AssertTagTypes, EndpointDefinitions, FullTagDescription } from '../endpointDefinitions';
export declare function buildMiddleware<Definitions extends EndpointDefinitions, ReducerPath extends string, TagTypes extends string>({ reducerPath, context, context: { endpointDefinitions }, queryThunk, mutationThunk, api, assertTagType, }: {
    reducerPath: ReducerPath;
    context: ApiContext<Definitions>;
    queryThunk: AsyncThunk<ThunkResult, QueryThunkArg<any>, {}>;
    mutationThunk: AsyncThunk<ThunkResult, MutationThunkArg<any>, {}>;
    api: Api<any, EndpointDefinitions, ReducerPath, TagTypes>;
    assertTagType: AssertTagTypes;
}): {
    middleware: Middleware<{}, RootState<Definitions, string, ReducerPath>, ThunkDispatch<any, any, AnyAction>>;
    actions: {
        invalidateTags: import("@reduxjs/toolkit").ActionCreatorWithPayload<(TagTypes | FullTagDescription<TagTypes>)[], string>;
    };
};
//# sourceMappingURL=buildMiddleware.d.ts.map